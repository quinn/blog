{"componentChunkName":"component---src-templates-blog-post-js","path":"/2010/08-30-why-i-think-datamapper-is-awesome/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Quinn's Blog"}},"markdownRemark":{"id":"aadb04c7-b70a-54df-9b23-c386dcf2bc59","excerpt":"I know Datamapper is probably considered “old news” at this point, which is something I think unfortunate considering its low adoption rate. I’m going to re…","html":"<p>I know Datamapper is probably considered “old news” at this point, which is something I think unfortunate considering its low adoption rate. I’m going to re-hash its advantages here just to add my own voice to its fan base. Here are some of the reasons I really like datamapper. In no specific order.</p>\n<h2>#1 robust query mapping</h2>\n<p>the datamapper API is robust enough that it drastically reduces how much one has to drop down to sql to get the desired results. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">DataMapper</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Resource</span>\n\n  property <span class=\"token symbol\">:published_at</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DateTime</span>\n\n  belongs_to <span class=\"token symbol\">:author</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">published_recently</span></span>\n    all <span class=\"token symbol\">:published_at</span><span class=\"token punctuation\">.</span>gte <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">1.</span>week<span class=\"token punctuation\">.</span>ago\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token constant\">Book</span><span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">.</span>published_recently<span class=\"token punctuation\">.</span>authors</code></pre></div>\n<p>only executes a single query. neat right?</p>\n<h2>#2 The property API</h2>\n<p>Datamapper favors explicit property definitions rather than attempting to infer them from the table. There are advantages to this, such as easier introspection and tighter control over serialization. Also, one of the ways that Datamapper offer’s to its users to add features is the property api. One can create their own classes to extend datamapper’s serialization and property mapping through a sussinct api:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">DataMapper</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Property</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Geo</span> <span class=\"token operator\">></span> <span class=\"token constant\">Yaml</span>\n      <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">dump</span></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> value<span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token operator\">||</span> value<span class=\"token punctuation\">.</span>kind_of<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Geokit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">GeoLoc</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span>\n          <span class=\"token keyword\">raise</span> <span class=\"token constant\">ArgumentError</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span>value<span class=\"token operator\">+</span> must be <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span> <span class=\"token keyword\">or</span> <span class=\"token constant\">Geokit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">GeoLoc</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">end</span>\n      <span class=\"token keyword\">end</span>\n\n      <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">typecast</span></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> value <span class=\"token keyword\">if</span> value<span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token operator\">||</span> value<span class=\"token punctuation\">.</span>kind_of<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Geokit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">GeoLoc</span><span class=\"token punctuation\">)</span>\n        geoloc <span class=\"token operator\">=</span> <span class=\"token constant\">GeoKit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Geocoders</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">MultiGeocoder</span><span class=\"token punctuation\">.</span>geocode<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">unless</span> geoloc<span class=\"token punctuation\">.</span>success\n          <span class=\"token keyword\">raise</span> <span class=\"token constant\">ArgumentError</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"+value+ is not a valid address\"</span>\n        <span class=\"token keyword\">end</span>\n        geoloc\n      <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This piggybacks on the existing yaml implementation that exists here: <a href=\"http://github.com/datamapper/dm-types/blob/v1.0.0/lib/dm-types/yaml.rb\">http://github.com/datamapper/dm-types/blob/v1.0.0/lib/dm-types/yaml.rb</a> . Basically, you get two methods, one for loading (deserializing) from the database and one for dumping (serializing) to the database. Using the above class you can now:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Profile</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">DataMapper</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Resource</span>\n\n  property <span class=\"token symbol\">:id</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Serial</span>\n  property <span class=\"token symbol\">:address</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Geo</span>\n<span class=\"token keyword\">end</span>\n\nprofile <span class=\"token operator\">=</span> <span class=\"token constant\">Profile</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nprofile<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> <span class=\"token string\">\"Brooklyn Bridge\"</span>\nprofile<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>district <span class=\"token comment\">#=> \"Manhattan\"</span></code></pre></div>\n<h2>#3 inclusion over inheritance</h2>\n<p>I suppose this one is largely a stylistic preference. I like explicitly saying <code class=\"language-text\">include DataMapper::Resource</code> that way you know where to include your modules. for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">DataMapper</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Resource</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">MyModule</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">InstanceMethods</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">module</span> <span class=\"token constant\">DataMapper</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Model</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">MyModule</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ClassMethods</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This is about as simple as it gets in my opinion. DataMapper::Resource’s self.included method simple extends the current class with DataMapper::Model and does nothing else. To me this is clean and simple and doesn’t add any fluff on top of what ruby does by default.</p>\n<h2>Rails 3</h2>\n<p>Rails 3 will fix many of these problems, but I think DataMapper’s api is still unique enough to merit looking into. Despite the improvements to activerecord 3 I plan on continuing to use datamapper in future projects.</p>","frontmatter":{"title":"Why I think datamapper is awesome","date":"August 30, 2010","description":null}}},"pageContext":{"slug":"/2010/08-30-why-i-think-datamapper-is-awesome/","previous":{"fields":{"slug":"/2010/08-23-switching-wordpress-to-nginx/"},"frontmatter":{"title":"Switching wordpress to nginx"}},"next":{"fields":{"slug":"/2010/09-21-quickly-search-bash/"},"frontmatter":{"title":"Quickly search through your Bash history"}}}}}