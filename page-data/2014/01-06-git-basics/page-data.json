{"componentChunkName":"component---src-templates-blog-post-js","path":"/2014/01-06-git-basics/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Quinn's Blog"}},"markdownRemark":{"id":"5c468046-c784-5c9f-912c-821cbb8ccd78","excerpt":"I’m going to document here some basics about git. I think a lot of very\nskilled developers who use git everyday haven’t yet “grocked” the fundamentals\nof how it…","html":"<p>I’m going to document here some basics about git. I think a lot of very\nskilled developers who use git everyday haven’t yet “grocked” the fundamentals\nof how it works. For starters, I am going to define a glossary of terms\nrelating to git (more are available by running “git help glossary”).</p>\n<p><strong>working tree (or working copy)</strong><br></p>\n<p>The working tree is the name given to the files and folders you are able to\nedit and are being managed by git.</p>\n<p><strong>HEAD</strong><br></p>\n<p>The HEAD ref represents where you currently * are * in the git history. For\nexample, if you are on the master branch, your head is associated with the\nmost recent commit on the master branch.</p>\n<p><strong>clean (working tree)</strong><br></p>\n<p>The working tree is considered clean (or pristine) if there is no difference\nbetween the code contained in the working tree and the state of the commit\nreferenced by HEAD.</p>\n<p><strong>sha</strong><br></p>\n<p>the sha is the canonical reference to a commit. All commits have a sha which\nis a (practically) unique identifier of the commit.</p>\n<p><strong>ref</strong><br></p>\n<p>A ref is any reference to a commit. a ref can be a branch or tag name, sha,\nHEAD or it can also be part of git’s special syntax for referencing commits.</p>\n<h2>Different ways to reference commits</h2>\n<p>git provides many different ways to reference commits beyond a branch or tag\nname. The two I am going to be using the most for this article are the\nrelative references. For example, to reference a commit’s ancestor you would\nuse ^. Add more ^‘s to move further back in time. Also, you can use ~number to\nhave the same affect. Some examples</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">HEAD^  # =&gt; one commit behind HEAD\nHEAD~1 #\n\nHEAD^^^^^^^^^^ # =&gt; ten commits behind HEAD\nHEAD~10        #</code></pre></div>\n<h2>Diffs, the working tree and HEAD</h2>\n<p>Any time a diff exists (seen by running “git diff”) this is because of a\ndifference between HEAD and the working tree. If either of these change (the\nHEAD changes, or the working tree changes) it changes the diff.</p>\n<h2>reset</h2>\n<p>the <code class=\"language-text\">git reset</code> command moves the current location of HEAD. When adding\n<code class=\"language-text\">--hard</code> to <code class=\"language-text\">git reset</code> it will also modify the working tree to match the new\ncommit that HEAD is associated with after being moved. HEAD is implied if no\nref is given. Some examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">git reset --hard\n# is the same as\ngit reset --hard HEAD</code></pre></div>\n<p>This command moves HEAD to where it already is and modifies the working tree\nto match. This has the effect of removing any diff on the current working\ntree.</p>\n<h2>checkout</h2>\n<p>It is possible to associate a branch with HEAD so that it remains associated\nwith HEAD as commits are created (rather than remaining associated with a\nspecific commit). This is achieved through “checking out” a branch. <code class=\"language-text\">git\ncheckout</code> can also be used to checkout any ref. <code class=\"language-text\">git checkout</code> differs from\n<code class=\"language-text\">git reset --hard</code> in that it attemps to safely move HEAD, i.e. it will throw\nan error if there is a diff that would be overwritten by the checkout.</p>\n<h2>rebase (non-interactive)</h2>\n<p><code class=\"language-text\">git rebase</code>, when used non-interactively, is a way of moving groups of\ncommits around within a project. <code class=\"language-text\">git rebase</code> is able to determine the common\nancestor of the current branch as well as the target, and move only the\ncommits that are different. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">      -----------* feature-001\n    /\n----*-----*\n          ▲\n          | master\n\ngit checkout feature-001\ngit rebase master\n\n    | this commit used to be the\n    | place where master and feature-001\n    | diverged. It is no longer significant\n    ▼\n----*-----*-----------* feature-001\n          ▲\n          | master</code></pre></div>\n<h2>try it out!</h2>\n<p><strong>Make a new branch on a project and see if you can complete some of these git\nrelated tasks with only using reset.</strong></p>\n<ol>\n<li>Squash the last 5 commits on your current branch into one commit.</li>\n<li>Split the most recent commit you made into two commits.</li>\n</ol>\n<p><strong>Try doing this using checkout, reset, and rebase:</strong></p>\n<ol>\n<li>split the 5th newest (~5) commit into two commits.</li>\n</ol>\n<h2>rebase (interactive)</h2>\n<p><code class=\"language-text\">git rebase -i</code> is a toolchain to help comlete some of the tasks described\nabove. It allows you to squash, split, and delete commits easily. For example,\n<code class=\"language-text\">git rebase -i HEAD~5</code> will allow you to reorganize and edit the last 5\ncommits on your project. Try to complete the tasks above using <code class=\"language-text\">git rebase -i</code>.</p>\n<p>I hoped this helped you understand git’s core features a little bit more. It’s\neasy to use git without fully understanding what is going on, but it’s\nimportant to have a deep understanding of the working of git to trully take\nadvantage of it’s power.</p>","frontmatter":{"title":"Fundamentals of git","date":"January 06, 2014","description":"\nI'm going to document here some basics about git. I think a lot of very\nskilled developers who use git everyday haven't yet \"grocked\" the\nfundamentals of how it works.\n"}}},"pageContext":{"slug":"/2014/01-06-git-basics/","previous":{"fields":{"slug":"/2010/10-07-faking-placeholder-text/"},"frontmatter":{"title":"faking placeholder from html5 in jquery"}},"next":{"fields":{"slug":"/2014/03-21-specify-a-local-path-for-a-gem/"},"frontmatter":{"title":"Specify a local path for a gem in your Gemfile"}}}}}