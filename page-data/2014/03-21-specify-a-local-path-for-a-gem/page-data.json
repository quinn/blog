{"componentChunkName":"component---src-templates-blog-post-js","path":"/2014/03-21-specify-a-local-path-for-a-gem/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Quinn's Blog"}},"markdownRemark":{"id":"c253964b-7eed-52e3-a5e0-ab656073fcab","excerpt":"Bundler provides a mechanism to override a gem with a local one which works as\nfollows: This is great and easy to understand. Unfortunately, it only works if…","html":"<p>Bundler provides a mechanism to override a gem with a local one which works as\nfollows:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">bundle config local.GEM_NAME /path/to/local/git/repository</code></pre></div>\n<p>This is great and easy to understand. Unfortunately, it only works if the gem\nis pulling from git in the Gemfile:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">gem <span class=\"token string\">'GEM_NAME'</span><span class=\"token punctuation\">,</span> github<span class=\"token punctuation\">:</span> <span class=\"token string\">'your/gem'</span><span class=\"token punctuation\">,</span> branch<span class=\"token punctuation\">:</span> <span class=\"token string\">'master'</span></code></pre></div>\n<p>This is great in some cases, but in others I’d rather develop against a gem\nand not modify the Gemfile when I am ready to deploy. The hack I came up with\nis to use two gemfiles. Create a file called <code class=\"language-text\">Gemfile.local</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Gemfile.local</span>\neval <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>expand_path<span class=\"token punctuation\">(</span><span class=\"token string\">'../Gemfile'</span><span class=\"token punctuation\">,</span> __FILE__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">@dependencies</span><span class=\"token punctuation\">.</span>delete <span class=\"token variable\">@dependencies</span><span class=\"token punctuation\">.</span>find <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>d<span class=\"token operator\">|</span> d<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">'GEM_NAME'</span> <span class=\"token punctuation\">}</span>\ngem <span class=\"token string\">'GEM_NAME'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'path/to/local/gem'</span></code></pre></div>\n<p>This file loads the original <code class=\"language-text\">Gemfile</code>, finds the gem, and redefines it to\npoint to your local gem. Next, run:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">bundle install --gemfile=Gemfile.local</code></pre></div>\n<p>You only have to run this once with the extra option. bundler will remember\nthe choice to use <code class=\"language-text\">Gemfile.local</code> in <code class=\"language-text\">.bundle/config</code>. This will generate a\nseparate lock file as well.</p>\n<p>From this point forward, Bundler should now reference your local gem, but\nstill use the actual gem in other environments. If you’d like to revert to\nusing the original Gemfile, just remove the line from <code class=\"language-text\">.bundle/config</code>.</p>","fields":{"slug":"/2014/03-21-specify-a-local-path-for-a-gem/"},"frontmatter":{"title":"Specify a local path for a gem in your Gemfile","date":"March 21, 2014","description":"Sometimes it can be nice to develop against a local gem without modifying\nyour Gemfile. Bundler provides a convenient mechanism for this, but it is\nlimited in the scenarios that it will work under. Here I describe a simple\napproach to get a similar effect.\n"}}},"pageContext":{"slug":"/2014/03-21-specify-a-local-path-for-a-gem/","previous":{"fields":{"slug":"/2014/01-06-git-basics/"},"frontmatter":{"title":"Fundamentals of git"}},"next":{"fields":{"slug":"/2014/03-26-running-nginx-in-the-foreground/"},"frontmatter":{"title":"Running NGINX in the Foreground"}}}}}