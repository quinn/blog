{"componentChunkName":"component---src-templates-blog-post-js","path":"/2014/03-26-running-nginx-in-the-foreground/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Quinn's Blog"}},"markdownRemark":{"id":"b4b002e8-ecd5-52ac-9bcf-3b79c92ad6b7","excerpt":"If you’re planning on using nginx as a frontend to one or more app processes,\nit can be helpful to setup and test things locally. An easy way to do this is\nto…","html":"<p>If you’re planning on using nginx as a frontend to one or more app processes,\nit can be helpful to setup and test things locally. An easy way to do this is\nto run nginx in the foreground so you can quickly iterate your config options\nto see what works. First, you need to create a config:</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token comment\"># nginx.conf</span>\n<span class=\"token comment\"># put wherever you want, mine is in the base of my project directory</span>\n\n<span class=\"token keyword\">worker_processes</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">daemon</span> off<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">events</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">worker_connections</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">http</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">listen</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>the most important line is <code class=\"language-text\">daemon off</code> which will cause nginx to run in the\nforeground. This will still run with the typical master / worker setup though,\nand can be used in production.</p>\n<p>The rest is the most minimal boilerplate to get nginx to serve an http server\non port 8080.</p>\n<p>Try opening browsing to <a href=\"http://localhost:8080/\">http://localhost:8080/</a>. You\nshould see a successful installation message from nginx. From here you can\nsetup proxies to your apps or whatever other config you want to test out.</p>","frontmatter":{"title":"Running NGINX in the Foreground","date":"March 26, 2014","description":"If you're planning on using nginx as a frontend to one or more app processes, it can be helpful to setup and test things locally. An easy way to do this is to run nginx in the foreground so you can quickly iterate your config options to see what works.\n"}}},"pageContext":{"slug":"/2014/03-26-running-nginx-in-the-foreground/","previous":{"fields":{"slug":"/2014/03-21-specify-a-local-path-for-a-gem/"},"frontmatter":{"title":"Specify a local path for a gem in your Gemfile"}},"next":{"fields":{"slug":"/2014/03-30-custom-rails-exception-pages/"},"frontmatter":{"title":"Custom error pages in Rails"}}}}}