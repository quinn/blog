{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2014/03-30-custom-rails-exception-pages/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Quinn's Blog"}},"markdownRemark":{"id":"301cae86-9cf6-54fc-85cb-25bc91ce627d","excerpt":"This has been previously documented, but the predominant way is this: https://gist.github.com/gonzedge/1563416 There are a number of things obviously wrong with…","html":"<p>This has been previously documented, but the predominant way is this:</p>\n<p><a href=\"https://gist.github.com/gonzedge/1563416\">https://gist.github.com/gonzedge/1563416</a></p>\n<p>There are a number of things obviously wrong with this, and I always disliked\nthis technique because it completely overrode rails’ existing handling of\nexceptions which already intelligently mapped exceptions to status codes. I\nassumed their must be a way to use this functionality and only override the\npart where the exception is actually rendered. I began digging, and found this\nin actionpack:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string-literal\"><span class=\"token string\">'action_dispatch/http/request'</span></span>\n<span class=\"token keyword\">require</span> <span class=\"token string-literal\"><span class=\"token string\">'action_dispatch/middleware/exception_wrapper'</span></span>\n\n<span class=\"token keyword\">module</span> <span class=\"token class-name\">ActionDispatch</span>\n  <span class=\"token comment\"># This middleware rescues any exception returned by the application</span>\n  <span class=\"token comment\"># and calls an exceptions app that will wrap it in a format for the end user.</span>\n  <span class=\"token comment\">#</span>\n  <span class=\"token comment\"># The exceptions app should be passed as parameter on initialization</span>\n  <span class=\"token comment\"># of ShowExceptions. Every time there is an exception, ShowExceptions will</span>\n  <span class=\"token comment\"># store the exception in env[\"action_dispatch.exception\"], rewrite the</span>\n  <span class=\"token comment\"># PATH_INFO to the exception status code and call the rack app.</span>\n  <span class=\"token comment\">#</span>\n  <span class=\"token comment\"># If the application returns a \"X-Cascade\" pass response, this middleware</span>\n  <span class=\"token comment\"># will send an empty response as result with the correct status code.</span>\n  <span class=\"token comment\"># If any exception happens inside the exceptions app, this middleware</span>\n  <span class=\"token comment\"># catches the exceptions and returns a FAILSAFE_RESPONSE.</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShowExceptions</span>\n    <span class=\"token constant\">FAILSAFE_RESPONSE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string-literal\"><span class=\"token string\">'Content-Type'</span></span> <span class=\"token operator\">=></span> <span class=\"token string-literal\"><span class=\"token string\">'text/plain'</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"500 Internal Server Error\\n\"</span></span> \\\n       <span class=\"token string-literal\"><span class=\"token string\">\"If you are the administrator of this website, then please read this web \"</span></span> \\\n       <span class=\"token string-literal\"><span class=\"token string\">\"application's log file and/or the web server's log file to find out what \"</span></span> \\\n       <span class=\"token string-literal\"><span class=\"token string\">\"went wrong.\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> exceptions_app<span class=\"token punctuation\">)</span>\n      <span class=\"token variable\">@app</span> <span class=\"token operator\">=</span> app\n      <span class=\"token variable\">@exceptions_app</span> <span class=\"token operator\">=</span> exceptions_app\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">call</span></span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span>\n      <span class=\"token variable\">@app</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">rescue</span> <span class=\"token builtin\">Exception</span> <span class=\"token operator\">=></span> exception\n      <span class=\"token keyword\">raise</span> exception <span class=\"token keyword\">if</span> env<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'action_dispatch.show_exceptions'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span>\n      render_exception<span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> exception<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">private</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">render_exception</span></span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> exception<span class=\"token punctuation\">)</span>\n      wrapper <span class=\"token operator\">=</span> <span class=\"token class-name\">ExceptionWrapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> exception<span class=\"token punctuation\">)</span>\n      status  <span class=\"token operator\">=</span> wrapper<span class=\"token punctuation\">.</span>status_code\n      env<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"action_dispatch.exception\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> wrapper<span class=\"token punctuation\">.</span>exception\n      env<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"PATH_INFO\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"/</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">status</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n      response <span class=\"token operator\">=</span> <span class=\"token variable\">@exceptions_app</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span>\n      response<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'X-Cascade'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">'pass'</span></span> <span class=\"token operator\">?</span> pass_response<span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> response\n    <span class=\"token keyword\">rescue</span> <span class=\"token builtin\">Exception</span> <span class=\"token operator\">=></span> failsafe_error\n      <span class=\"token variable\">$stderr</span><span class=\"token punctuation\">.</span>puts <span class=\"token string-literal\"><span class=\"token string\">\"Error during failsafe response: </span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">failsafe_error</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\\n  </span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">failsafe_error<span class=\"token punctuation\">.</span>backtrace <span class=\"token operator\">*</span> <span class=\"token string-literal\"><span class=\"token string\">\"\\n  \"</span></span></span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n      <span class=\"token constant\">FAILSAFE_RESPONSE</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">pass_response</span></span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">[</span>status<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string-literal\"><span class=\"token string\">\"Content-Type\"</span></span> <span class=\"token operator\">=></span> <span class=\"token string-literal\"><span class=\"token string\">\"text/html; charset=</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">Response<span class=\"token punctuation\">.</span>default_charset</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"Content-Length\"</span></span> <span class=\"token operator\">=></span> <span class=\"token string-literal\"><span class=\"token string\">\"0\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>As you can see, this middleware uses something called <code class=\"language-text\">ExceptionWrapper</code> to\n(presumably) convert the original exception to an HTTP status code. It also\nconveniently assigns it to the path (“/404”, “/500”, etc) and passes it to a\nconfigurable exceptions_app. Further digging found this in\n<code class=\"language-text\">railties/lib/rails/application.rb</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># ~ line 335</span>\nmiddleware<span class=\"token punctuation\">.</span>use <span class=\"token double-colon punctuation\">::</span>ActionDispatch<span class=\"token double-colon punctuation\">::</span>ShowExceptions<span class=\"token punctuation\">,</span> show_exceptions_app\n\n<span class=\"token comment\"># ~ line 391</span>\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">show_exceptions_app</span></span>\n  config<span class=\"token punctuation\">.</span>exceptions_app <span class=\"token operator\">||</span> ActionDispatch<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">PublicExceptions</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>Rails<span class=\"token punctuation\">.</span>public_path<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Ok, great. This provides an easy way to hook into the ShowExceptions\nmiddleware by overriding the config.exceptions_app. In my app I put this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># config/application.rb</span>\nconfig<span class=\"token punctuation\">.</span>exceptions_app <span class=\"token operator\">=</span> <span class=\"token class-name\">Proc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>env<span class=\"token operator\">|</span>\n  <span class=\"token comment\"># all controllers are middleware, remember?</span>\n  ApplicationController<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">(</span><span class=\"token symbol\">:show_errors</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># application_controller.rb</span>\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">show_errors</span></span>\n  status <span class=\"token operator\">=</span> env<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"PATH_INFO\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n  respond_to <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>format<span class=\"token operator\">|</span>\n    format<span class=\"token punctuation\">.</span>html <span class=\"token punctuation\">{</span> render template<span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"errors/</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">status</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">layout</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'layouts/application'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">status</span><span class=\"token operator\">:</span> status <span class=\"token punctuation\">}</span>\n    format<span class=\"token punctuation\">.</span>all <span class=\"token punctuation\">{</span> render nothing<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">status</span><span class=\"token operator\">:</span> status <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This is pretty straightforward I think, but after looking around a bit more I\nfound a solution by <a href=\"http://blog.plataformatec.com.br/2012/01/my-five-favorite-hidden-features-in-rails-3-2/\">José Valim</a> that may be considered even more\nelegant to some:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># config/application.rb</span>\nconfig<span class=\"token punctuation\">.</span>exceptions_app <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>routes\n\n<span class=\"token comment\"># routes.rb</span>\nmatch <span class=\"token string-literal\"><span class=\"token string\">\"/404\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:to</span> <span class=\"token operator\">=></span> <span class=\"token string-literal\"><span class=\"token string\">\"errors#not_found\"</span></span></code></pre></div>\n<p>Regardless of how you decide to handle this, I think the most important take\naway is that Rails almost always provides a way to exploit the functionality\nit provides as a framework. Rarely do you have to “fight against” the\nframework and recreate existing functionality to get the behavior you want.</p>","fields":{"slug":"/2014/03-30-custom-rails-exception-pages/"},"frontmatter":{"title":"Custom error pages in Rails","date":"March 30, 2014","description":"I know this has been documented many times, but I felt this was necessary because I am still seeing many more descriptions of the \"wrong\" way to do this rather than the right way. Hopefully I can help tip the scales a bit on the subject.\n"}}},"pageContext":{"slug":"/2014/03-30-custom-rails-exception-pages/","previous":{"fields":{"slug":"/2014/03-26-running-nginx-in-the-foreground/"},"frontmatter":{"title":"Running NGINX in the Foreground"}},"next":{"fields":{"slug":"/2014/04-04-experiments-with-docker/"},"frontmatter":{"title":"Experiments with Docker"}}}},
    "staticQueryHashes": ["1091219763","63159454"]}