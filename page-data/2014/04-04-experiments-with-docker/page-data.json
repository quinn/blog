{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2014/04-04-experiments-with-docker/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Quinn's Blog"}},"markdownRemark":{"id":"58292bd8-fcf1-5398-9618-24cc725367bf","excerpt":"Docker is a wonderfully fun tool that makes building something like a PaaS\nalmost trivial. Docker has great tutorials and documentation on their main\nwebsite…","html":"<p>Docker is a wonderfully fun tool that makes building something like a PaaS\nalmost trivial. Docker has great tutorials and documentation on their main\nwebsite: <a href=\"https://www.docker.io/\">https://www.docker.io/</a></p>\n<p>Docker builds on top of LXC (LinuX Containers) to provide a clean, easy-to-use\ninterface for setting up and running containers. Because of this, Docker will\nonly run on a linux distribution.</p>\n<p>The first thing to do is to take a look at the help menu for the <code class=\"language-text\">docker</code>\ncommand:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Usage: docker [OPTIONS] COMMAND [arg...]\n -H=[unix:///var/run/docker.sock]: tcp://host:port to bind/connect to or unix://path/to/socket to use\n\nA self-sufficient runtime for linux containers.\n\nCommands:\n    attach    Attach to a running container\n    build     Build a container from a Dockerfile\n    commit    Create a new image from a container's changes\n    cp        Copy files/folders from the containers filesystem to the host path\n    diff      Inspect changes on a container's filesystem\n    events    Get real time events from the server\n    export    Stream the contents of a container as a tar archive\n    history   Show the history of an image\n    images    List images\n    import    Create a new filesystem image from the contents of a tarball\n    info      Display system-wide information\n    insert    Insert a file in an image\n    inspect   Return low-level information on a container\n    kill      Kill a running container\n    load      Load an image from a tar archive\n    login     Register or Login to the docker registry server\n    logs      Fetch the logs of a container\n    port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT\n    ps        List containers\n    pull      Pull an image or a repository from the docker registry server\n    push      Push an image or a repository to the docker registry server\n    restart   Restart a running container\n    rm        Remove one or more containers\n    rmi       Remove one or more images\n    run       Run a command in a new container\n    save      Save an image to a tar archive\n    search    Search for an image in the docker index\n    start     Start a stopped container\n    stop      Stop a running container\n    tag       Tag an image into a repository\n    top       Lookup the running processes of a container\n    version   Show the docker version information\n    wait      Block until a container stops, then print its exit code</code></pre></div>\n<p>This has a wealth of information on what you can do right away with docker.\nTry running <code class=\"language-text\">docker run ubuntu touch file_in_container</code> to get an idea about\nhow things work. This command will download the ubuntu image and create a new\ncontainer which runs the command <code class=\"language-text\">touch file_in_container</code>.</p>\n<p>it is important to remember that docker container are <em>stateless</em>. A\ncontainer’s contents will always be exactly as they are in the container’s\nimage, and it is not possible to run a command on an existing container\n(running <code class=\"language-text\">docker run ubuntu touch file_in_container</code> would create a new\ncontainer to run the command). Try running something more substantial:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run ubuntu <span class=\"token function\">apt-get</span> -y <span class=\"token function\">install</span> build-essential</code></pre></div>\n<p>If you decided that having build tools installed was a good starting point,\nyou could save this container’s state as an image. Let’s find our container by\nrunning <code class=\"language-text\">docker ps -a</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CONTAINER ID        IMAGE                   COMMAND                CREATED             STATUS\n305883092cfd        ubuntu:latest           apt-get -y install b   5 minutes ago       Exit 0\n3088358bd9c5        ubuntu:latest           touch file_in_contai   5 minutes ago       Exit 0</code></pre></div>\n<p>It looks like “305883092cfd” is the one we want. Try saving it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker commit <span class=\"token number\">305</span> buildtools</code></pre></div>\n<p>Now run <code class=\"language-text\">docker images</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nbuildtools          latest              d036e72d2e40        2 minutes ago       320.5 MB\nubuntu              latest              9cd978db300e        10 minutes ago      204.4 MB</code></pre></div>\n<p>As you can see, you have now prepared for yourself an image with build tools\npreinstalled. Try running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run buildtools <span class=\"token function\">make</span></code></pre></div>\n<p>As you can see, the <code class=\"language-text\">docker</code> command provides some great high-level tools for\nlearning about Docker. For anything serious though, you’ll probably want to\nuse the API. I’ll be writing a follow-up on that soon. Stay tuned!</p>","fields":{"slug":"/2014/04-04-experiments-with-docker/"},"frontmatter":{"title":"Experiments with Docker","date":"April 04, 2014","description":"Docker is a wonderfully fun tool that makes building things like a PaaS almost trivial. I've documented a brief intro to some of Docker's common cli functions\n"}}},"pageContext":{"slug":"/2014/04-04-experiments-with-docker/","previous":{"fields":{"slug":"/2014/03-30-custom-rails-exception-pages/"},"frontmatter":{"title":"Custom error pages in Rails"}},"next":{"fields":{"slug":"/2014/04-09-stubbing-rails-request-with-custom-rack/"},"frontmatter":{"title":"Stubbing Rails request with custom Rack env"}}}},
    "staticQueryHashes": ["1091219763","63159454"]}