{"componentChunkName":"component---src-templates-blog-post-js","path":"/2014/04-09-stubbing-rails-request-with-custom-rack/","result":{"data":{"site":{"siteMetadata":{"title":"Quinn's Blog"}},"markdownRemark":{"id":"a911fc32-caad-553d-8f3d-e7a090f12b9d","excerpt":"If you are are using the  gem you should know that there are a\nton of really good ways to test controllers. But, sometimes it can be nice to\nhave total control…","html":"<p>If you are are using the <code class=\"language-text\">rspec-rails</code> gem you should know that there are a\nton of really good ways to test controllers. But, sometimes it can be nice to\nhave total control over the input that is going to your controller. I’m going\nto show you how to construct a request as a rack environment as well as a\nrequest path.</p>\n<p>To find a good intersection point for us to build a stub rack environment and\ninject it into Rail’s request life-cycle, let’s look at where in the Rails code\nthe controller get called from the router:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># action_pack/routing/route_set.rb</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">call</span></span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span>\n  params <span class=\"token operator\">=</span> env<span class=\"token punctuation\">[</span><span class=\"token constant\">PARAMETERS_KEY</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\"># If any of the path parameters has a invalid encoding then</span>\n  <span class=\"token comment\"># raise since it's likely to trigger errors further on.</span>\n  params<span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>key<span class=\"token punctuation\">,</span> value<span class=\"token operator\">|</span>\n    <span class=\"token keyword\">next</span> <span class=\"token keyword\">unless</span> value<span class=\"token punctuation\">.</span>respond_to<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:valid_encoding?</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">unless</span> value<span class=\"token punctuation\">.</span>valid_encoding<span class=\"token operator\">?</span>\n      <span class=\"token keyword\">raise</span> ActionController<span class=\"token double-colon punctuation\">::</span>BadRequest<span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"Invalid parameter: </span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">key</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\"> => </span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">value</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  prepare_params<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># Just raise undefined constant errors if a controller was specified as default.</span>\n  <span class=\"token keyword\">unless</span> controller <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token variable\">@defaults</span><span class=\"token punctuation\">.</span>key<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:controller</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string-literal\"><span class=\"token string\">'X-Cascade'</span></span> <span class=\"token operator\">=></span> <span class=\"token string-literal\"><span class=\"token string\">'pass'</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n\n  dispatch<span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:action</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Let’s look at the definition of <code class=\"language-text\">controller()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># If this is a default_controller (i.e. a controller specified by the user)</span>\n<span class=\"token comment\"># we should raise an error in case it's not found, because it usually means</span>\n<span class=\"token comment\"># a user error. However, if the controller was retrieved through a dynamic</span>\n<span class=\"token comment\"># segment, as in :controller(/:action), we should simply return nil and</span>\n<span class=\"token comment\"># delegate the control back to Rack cascade. Besides, if this is not a default</span>\n<span class=\"token comment\"># controller, it means we should respect the @scope[:module] parameter.</span>\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">controller</span></span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> default_controller<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> params <span class=\"token operator\">&amp;&amp;</span> params<span class=\"token punctuation\">.</span>key<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:controller</span><span class=\"token punctuation\">)</span>\n    controller_param <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:controller</span><span class=\"token punctuation\">]</span>\n    controller_reference<span class=\"token punctuation\">(</span>controller_param<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">rescue</span> NameError <span class=\"token operator\">=></span> e\n  <span class=\"token keyword\">raise</span> ActionController<span class=\"token double-colon punctuation\">::</span>RoutingError<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>backtrace <span class=\"token keyword\">if</span> default_controller\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>It’s easy to tell that this the business logic for translating\n<code class=\"language-text\">params[:controller] = 'articles'</code> into <code class=\"language-text\">ArticlesController</code>. We can safely\nassume that a controller class is now stored in the <code class=\"language-text\">controller</code> variable. Now\nlet’s look at the definition of <code class=\"language-text\">dispatch()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">dispatch</span></span><span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">)</span>\n  controller<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>That’s a pretty clean API. If we want to test a specific controller and\naction, this would be a great place to intersect. Let’s take a look at that:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">ArticlesController<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">(</span><span class=\"token symbol\">:show</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This won’t work unfortunately, there is a minimum amount of parameters\nnecessary to get a request to actually work. This is what I’ve used with some\nsuccess:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">ArticlesController<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">(</span><span class=\"token symbol\">:show</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string-literal\"><span class=\"token string\">\"rack.input\"</span></span>     <span class=\"token operator\">=></span> <span class=\"token class-name\">StringIO</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-literal\"><span class=\"token string\">\"REQUEST_METHOD\"</span></span> <span class=\"token operator\">=></span> <span class=\"token string-literal\"><span class=\"token string\">\"POST\"</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-literal\"><span class=\"token string\">\"HTTP_ACCEPT\"</span></span>    <span class=\"token operator\">=></span> <span class=\"token string-literal\"><span class=\"token string\">\"text/html\"</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-literal\"><span class=\"token string\">\"HTTP_HOST\"</span></span>      <span class=\"token operator\">=></span> options<span class=\"token punctuation\">[</span><span class=\"token symbol\">:host</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-literal\"><span class=\"token string\">\"rack.session\"</span></span>   <span class=\"token operator\">=></span> Hashie<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Mash</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-literal\"><span class=\"token string\">'action_dispatch.cookies'</span></span> <span class=\"token operator\">=></span> Hashie<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Mash</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-literal\"><span class=\"token string\">\"action_dispatch.request.parameters\"</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token symbol\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>As you can see, this allows you to stub your own rack environment with the\nparameters that work for your scenario. Most of the time this won’t be\nnecessary with the testing tools that are available but it can be useful every\nonce and awhile.</p>","fields":{"slug":"/2014/04-09-stubbing-rails-request-with-custom-rack/"},"frontmatter":{"title":"Stubbing Rails request with custom Rack env","date":"April 09, 2014","description":"There are plenty of tools that provide easy ways to do controller testing in rails, but sometimes in can be nice to test against a specifically built rack env when testing a controller or middleware. Here I dig through some Rails internals to figure out some different ways of doing this.\n"}}},"pageContext":{"slug":"/2014/04-09-stubbing-rails-request-with-custom-rack/","previous":{"fields":{"slug":"/2014/04-04-experiments-with-docker/"},"frontmatter":{"title":"Experiments with Docker"}},"next":{"fields":{"slug":"/2014/04-14-postgresql-array-and-hstore-column-reference/"},"frontmatter":{"title":"Postgresql Array and Hstore Column Reference"}}}},"staticQueryHashes":["1091219763","63159454"]}