{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2014/04-14-postgresql-array-and-hstore-column-reference/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Quinn's Blog"}},"markdownRemark":{"id":"f63bce84-62d7-59b8-a8c8-e5f939a35440","excerpt":"First of all, let’s start with links to the relevant postgres docs: http://www.postgresql.org/docs/9.3/static/hstore.html\n\nhttp://www.postgresql.org/docs/9.…","html":"<p>First of all, let’s start with links to the relevant postgres docs:</p>\n<p><a href=\"http://www.postgresql.org/docs/9.3/static/hstore.html\">http://www.postgresql.org/docs/9.3/static/hstore.html</a>\n<br>\n<a href=\"http://www.postgresql.org/docs/9.3/static/arrays.html\">http://www.postgresql.org/docs/9.3/static/arrays.html</a>\n<br>\n<a href=\"http://www.postgresql.org/docs/9.3/static/functions-array.html\">http://www.postgresql.org/docs/9.3/static/functions-array.html</a></p>\n<p>The postgres project has excellent documentation, and these links do covere\neverything you would need to work with hstore and arrays with postgres.\nSometimes though it can be difficult to translate their examples into real\nworld examples, and it can also be difficult to translate this into\nActiveRecord.</p>\n<h3>Postgresql Arrays</h3>\n<p>Arrays in postgres in that they aren’t their own type per se, rather than it’s\nown separate type. Rather, the existing column types can be declared as an\narray (e.g. an array of ints, array of texts, etc).</p>\n<h3>Declaring array fields</h3>\n<p>Arrays can be declared in the following ways:</p>\n<h4>SQL</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> articles <span class=\"token punctuation\">(</span>body <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> tags <span class=\"token keyword\">text</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>ActiveRecord</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">create_table <span class=\"token symbol\">:articles</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>t<span class=\"token operator\">|</span>\n  t<span class=\"token punctuation\">.</span>text <span class=\"token symbol\">:body</span>\n  t<span class=\"token punctuation\">.</span>text <span class=\"token symbol\">:tags</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">array</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>That’s pretty straightforward. I’m going to go through some common operations.</p>\n<h3>Array inclusion</h3>\n<p>Sometimes you want to find out if an array includes, or does not include a\ngiven value, and return the records where it is true. Given the above table,\nthis is what that could look like:</p>\n<h4>SQL</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- which articles are tagged with 'programming'</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> articles <span class=\"token keyword\">WHERE</span> <span class=\"token string\">'programming'</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">ANY</span> <span class=\"token punctuation\">(</span>tags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">--- which articles are not tagged with 'programming'</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> articles <span class=\"token keyword\">WHERE</span> <span class=\"token string\">'programming'</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">ALL</span> <span class=\"token punctuation\">(</span>tags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">--- or</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> articles <span class=\"token keyword\">WHERE</span> <span class=\"token operator\">NOT</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'programming'</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">ANY</span> <span class=\"token punctuation\">(</span>tags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>ActiveRecord</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># which articles are tagged with 'programming'</span>\nArticle<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'? = ANY (tags)'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'programming'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># which articles are not tagged with 'programming'</span>\nArticle<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'? != ALL (tags)'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'programming'</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># or</span>\nArticle<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'NOT (? = ANY (tags))'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'programming'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Updating arrays</h3>\n<p>How do you append to an array? You could use your ORM in a predictable way:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">article <span class=\"token operator\">=</span> Article<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\narticle<span class=\"token punctuation\">.</span>tags <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string-literal\"><span class=\"token string\">'programming'</span></span>\narticle<span class=\"token punctuation\">.</span>save<span class=\"token operator\">!</span></code></pre></div>\n<blockquote>\n<p><strong>Note (2014-04-16)</strong>: There may be currently a bug in rails that can cause</p>\n</blockquote>\n<p>issues with the above syntax. If so, try running <code class=\"language-text\">article.tags_will_change!</code>.\nMore info on the bug <a href=\"https://github.com/rails/rails/issues/6127\">here</a>. Thanks, <a href=\"http://www.komendera.com/\">Dieter Komendera</a> for\npointing this out.</p>\n<p>But what if you wanted to perform this in a single operation, or what if you\nwanted to perform this on multiple records at once in a single query? This is\npossible, using the <code class=\"language-text\">append_array</code> function:</p>\n<h4>SQL</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> articles <span class=\"token keyword\">SET</span> tags <span class=\"token operator\">=</span> array_append<span class=\"token punctuation\">(</span>tags<span class=\"token punctuation\">,</span> <span class=\"token string\">'programming'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>ActiveRecord</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">Article<span class=\"token punctuation\">.</span>update_all Article<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token symbol\">:sanitize_sql</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'tags = array_append(tags, ?)'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'programming'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This unfortunately isn’t as clean as one might like it to be in ActiveRecord.\nI’d love to know if there is a better way to do this.</p>\n<h3>Find empty arrays</h3>\n<p>Generally when creating an array column I think it is advisable to to make it\nnon-null and default to an empty array:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">t<span class=\"token punctuation\">.</span>text <span class=\"token symbol\">:tags</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">array</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">null</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>This prevents a small “gotcha” when an array column is null (not an empty\narray). For example, in the example above that tests for a value not being in\nthe array field, the query would have returned a misleading empty set if all\nof the array columns were null. You can get around this by setting a column\ndefault, or by testing to see if the array column is null:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> articles <span class=\"token keyword\">where</span> <span class=\"token string\">'programming'</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">ALL</span> <span class=\"token punctuation\">(</span>tags<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> tags <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you wanted to find all records with empty tags <em>and</em> null tags, you could do:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> articles <span class=\"token keyword\">where</span> tags <span class=\"token operator\">=</span> <span class=\"token string\">'{}'</span> <span class=\"token operator\">OR</span> tags <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Array intersection</h3>\n<p>It’s a common scenario to want to find records with an array field that has at\nleast one member from a given list. You can use the <code class=\"language-text\">&amp;&amp;</code> operator to find\nthese:</p>\n<h4>SQL</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> articles <span class=\"token keyword\">WHERE</span> tags <span class=\"token operator\">&amp;&amp;</span> ARRAY<span class=\"token punctuation\">[</span><span class=\"token string\">'devops'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'design'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">--- or, if your array column is of something other than text (possibly varchar)</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> articles <span class=\"token keyword\">WHERE</span> CAST <span class=\"token punctuation\">(</span>tags <span class=\"token keyword\">as</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> ARRAY<span class=\"token punctuation\">[</span><span class=\"token string\">'devops'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'design'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>ActiveRecord</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">Article<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'tags &amp;&amp; ARRAY[?]'</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'devops'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'design'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Postgresql Hstore</h3>\n<p>Postgres hstore is column type for storing hierarchical schemaless data\n(sometimes called “documents”) in a Postgres table. This is great if you are\ngoing to be storing data you’d like to be able to query, but aren’t necessarily\ngoing to have consistent field names. Hstore is often compared to NoSQL\ndocument stores such as MongoDB.</p>\n<h3>Declaring Hstore column type</h3>\n<p><code class=\"language-text\">hstore</code> is just a column type like any other, so declaring it is\nstraightforward.</p>\n<h4>SQL</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> web_requests <span class=\"token punctuation\">(</span>\n  url <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">,</span>\n  body <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>\n  headers hstore\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>ActiveRecord</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">create_table <span class=\"token symbol\">:web_requests</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>t<span class=\"token operator\">|</span>\n  t<span class=\"token punctuation\">.</span>string <span class=\"token symbol\">:url</span>\n  t<span class=\"token punctuation\">.</span>text <span class=\"token symbol\">:body</span>\n  t<span class=\"token punctuation\">.</span>hstore <span class=\"token symbol\">:headers</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Setting a value to a key in hstore</h3>\n<p>Hstore keys are strings, and one of two types can be assigned to a key in\nhstore: a string, or another hstore value.</p>\n<h4>SQL</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> web_requests <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'/articles.json'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Accept        => application/json,\n   Cache-Control => no-cache'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>ActiveRecord</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">web_request <span class=\"token operator\">=</span> WebRequest<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token symbol\">url</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'/articles.json'</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token symbol\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-literal\"><span class=\"token string\">'Accept'</span></span>        <span class=\"token operator\">=></span> <span class=\"token string-literal\"><span class=\"token string\">'application/json'</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-literal\"><span class=\"token string\">'Cache-Control'</span></span> <span class=\"token operator\">=></span> <span class=\"token string-literal\"><span class=\"token string\">'no-cache'</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Finding a record with an hstore with a given value</h3>\n<p>These are examples of how to find records that have a key with a given value\nfor an hstore column.</p>\n<h4>SQL</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> web_requests <span class=\"token keyword\">WHERE</span> headers<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token string\">'Accept'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/json'</span></code></pre></div>\n<h4>ActiveRecord</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">WebRequest<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"headers->'Accept' = ?\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'application/json'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Finding a record with an hstore with a non-null value for a given key</h3>\n<p>Sometimes you want to find all records that have any value set for a given\nkey. Using our <code class=\"language-text\">WebRequest</code> example this could be useful for finding all\nrequests that set caching headers. Postgresql provides a <code class=\"language-text\">defined</code> function\nfor this.</p>\n<h4>SQL</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> web_requests <span class=\"token keyword\">WHERE</span> defined<span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">,</span> <span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>ActiveRecord</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">WebRequest<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'defined(headers, ?)'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'Cache-Control'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Removing a key from an hstore</h3>\n<p>Rather than setting a key to an empty string or <code class=\"language-text\">NULL</code>, sometimes it can be\nnice to completely remove the value and key from hstore. Postgresql provides a\n<code class=\"language-text\">delete</code> function to this. Again, I am not aware of a clean interface for\nrunning functions in an <code class=\"language-text\">UPDATE</code> while using ActiveRecord, so I’m using the\nsame hacky solution described previously for <code class=\"language-text\">append_array</code>.</p>\n<h4>SQL</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> articles <span class=\"token keyword\">SET</span> headers <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">,</span> <span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span></code></pre></div>\n<h4>ActiveRecord</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">Article<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span><span class=\"token symbol\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>update_all Article<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token symbol\">:sanitize_sql</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'headers = delete(headers, ?)'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'Cache-Control'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>That’s all for now. Hopefully this helps clarify some ways of using arrays and\nhstore especially in practice, and when using ActiveRecord. Stay tuned for\nmore snippets as well as examples of using postgres’s enum functionality in\nActiveRecord.</p>","fields":{"slug":"/2014/04-14-postgresql-array-and-hstore-column-reference/"},"frontmatter":{"title":"Postgresql Array and Hstore Column Reference","date":"April 14, 2014","description":"I've had trouble finding a good reference for hstore and arrays in postgres that includes examples and use-cases so I decided to put together my own here. Hopefully others can get some use out of it. I've also included some examples of how to use with ActiveRecord.\n"}}},"pageContext":{"slug":"/2014/04-14-postgresql-array-and-hstore-column-reference/","previous":{"fields":{"slug":"/2014/04-09-stubbing-rails-request-with-custom-rack/"},"frontmatter":{"title":"Stubbing Rails request with custom Rack env"}},"next":{"fields":{"slug":"/2014/04-19-log-nginx-to-stdout-and-stderr-when-run/"},"frontmatter":{"title":"Log to STDOUT and STDERR when Running NGINX in the Foreground"}}}},
    "staticQueryHashes": ["1091219763","63159454"]}