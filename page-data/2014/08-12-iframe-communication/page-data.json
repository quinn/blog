{"componentChunkName":"component---src-templates-blog-post-js","path":"/2014/08-12-iframe-communication/","result":{"data":{"site":{"siteMetadata":{"title":"Quinn's Blog"}},"markdownRemark":{"id":"6f9b26b2-ef52-55d6-a5a0-946ac81c2a4b","excerpt":"I recently was working on a project where iframes seemed to be the most\nlogical solution. Actually, iframes I think are a perfectly reasonable tool\nfor some…","html":"<p>I recently was working on a project where iframes seemed to be the most\nlogical solution. Actually, iframes I think are a perfectly reasonable tool\nfor some problems, but unfortunately the get a bad name because of their many\nedge cases. I originally set out to create bi-directional event-based\ncommunination between the iframe and it’s parent, cross-browser, and\nregardless of same or different origin (domain). Here I’m going to describe\nthe javascript I’m using as well as some of the backend code required to work\naround certain browsers.</p>\n<blockquote>\n<p><strong>Note</strong>: The below examples use jQuery.</p>\n</blockquote>\n<h3>Window Message Events</h3>\n<p>The key to all of this is the <code class=\"language-text\">window.postMessage</code> call and the <code class=\"language-text\">message</code> event. Here are some snippets:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message text'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://tastehoneyco.com'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>originalEvent<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do something with the message.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is a pretty minimal and easy to understand API. In my case, it seemed helpful to be able to send more complex messages, so I created a shared javascript file across the two domains that knows how to serialize and deserialize JSON messages containing named events. This allows for a more automated workflow:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token comment\">// IframeMessages.prototype.iframe is an object that contains</span>\n<span class=\"token comment\">// all of the events for the iframe. This code is used by the iframe.</span>\n<span class=\"token class-name\">IframeMessages</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">activityFinished</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this code is ran by the parent window.</span>\n<span class=\"token keyword\">var</span> iframe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IframeMessages</span><span class=\"token punctuation\">;</span>\niframe<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activityFinished'</span><span class=\"token punctuation\">,</span> activity<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Common use-case: Make my iframe the height of the iframe content!</h3>\n<p>This is probably the most common use-case for something like this. I’ve looked\ninto this quite a bit, and I am fairly confident there is no way to handle\nthis without polling the dimensions. Also, the child iframe <strong>must</strong> send the\ndimensions because the parent is unable to introspect on the iframe (on a\ndifferent domain). See the following snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// turn on resize detection. Begins polling quill.org with content dimensions</span>\n<span class=\"token comment\">// of module.</span>\n<span class=\"token class-name\">IframeMessages</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">autoResize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// no wrapper, we are not in an iframe. Early exit.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>self <span class=\"token operator\">==</span> window<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// modified from: http://stackoverflow.com/a/14901150/1397097</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">checkDocumentHeight</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> lastHeight <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">,</span> newHeight<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// there doesn't seem to be a reliable way to detected wh</span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      newHeight <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>offsetHeight<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastHeight <span class=\"token operator\">!=</span> newHeight<span class=\"token punctuation\">)</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      lastHeight <span class=\"token operator\">=</span> newHeight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// send the dimensions to quill.org.</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">postWindowSize</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">first</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">==</span> <span class=\"token string\">'first'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      data<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      data<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>offsetHeight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">checkDocumentHeight</span><span class=\"token punctuation\">(</span><span class=\"token function\">postWindowSize</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">postWindowSize</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and the resize event triggered on the parent:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// this is the handler for the resize event coming from the iframe.</span>\n<span class=\"token comment\">// it contains the new dimensions of the content contained from within the iframe.</span>\n<span class=\"token function-variable function\">resize</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dimensions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$iframe<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>dimensions<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h3>Getting cookies to work</h3>\n<blockquote>\n<p><strong>Note (2014-08-13)</strong>: Newer versions of Chrome and other browsers seem to</p>\n</blockquote>\n<p>block 3rd party cookies by default. I am still working on a workaround for\nthis.</p>\n<p>If you’ve done this before on a different domain, you’ve probably noticed that\nthere are some issues cookies. Safari (and possibly other browsers) blocks\niframes on domains that the user hasn’t visited from storing cookies. This\nactually makes sense from a security / privacy perspective in most scenarios\n(you wouldn’t want an advertisement on a domain you’ve never visited to be\nable to store cookies) but in our case it is very inconvenient. There is no\n“hack” per se to get around this other than to actually navigate to the page\nand then navigate back.</p>\n<h3>Using postMessage with different domains</h3>\n<p>First, it is important that all frames are ready before attempting to use\n<code class=\"language-text\">postMessage</code>. To get postMessage to work you must match the frame’s host\n<em>exactly</em> to get it work:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">targetWindow<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span>       <span class=\"token string\">'http://locahost:3000'</span><span class=\"token punctuation\">)</span>\ntargetWindow<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'other message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>That’s it for now! I’ll post more tips and tricks later on when I’ve come up\nwith more.</p>","fields":{"slug":"/2014/08-12-iframe-communication/"},"frontmatter":{"title":"Facilitating Bidirectional Cross-Domain Communication with an Iframe","date":"August 12, 2014","description":"Using iframes in your app can be excruciating, especially when the iframe and the parent window are on two different domains. I'm going to go over the process of facilitating bi-directional communication between the iframe and it's parent window.\n"}}},"pageContext":{"slug":"/2014/08-12-iframe-communication/","previous":{"fields":{"slug":"/2014/04-19-log-nginx-to-stdout-and-stderr-when-run/"},"frontmatter":{"title":"Log to STDOUT and STDERR when Running NGINX in the Foreground"}},"next":{"fields":{"slug":"/2014/08-17-installing-metasploit-on-osx-with-rbenv/"},"frontmatter":{"title":"Installing Metasploit on OS X with rbenv"}}}},"staticQueryHashes":["1091219763","63159454"]}