{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2014/08-30-prevent-brute-force-login-on-wordpress/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Quinn's Blog"}},"markdownRemark":{"id":"2cbc0a88-cabf-52a4-a8d0-faaed2749fd2","excerpt":"The solution here uses ModSecurity and is based mostly on this\narticle by Todd Garrison. There are many ways that one could handle\nthis issue, for example a…","html":"<p>The solution here uses <a href=\"https://www.modsecurity.org/\">ModSecurity</a> and is based mostly on <a href=\"http://www.frameloss.org/2011/07/29/stopping-brute-force-logins-against-wordpress/\">this\narticle by Todd Garrison</a>. There are many ways that one could handle\nthis issue, for example a plugin in wordpress, an upstream proxy server that\nhandles security, or a modifacation to the web server (in this case apache). I\nchose to handle this on the webserver in part because there were many well\ndocumented solutions for this and that it seemed like the best way to conserve\nsystem resources (by not adding bloat to wordpress) without adding too much\ninfrastructure.</p>\n<h3>Installation</h3>\n<p>The first thing you’ll need to do is install ModSecurity which will probably\nbe available in your package manager (I’m using yum / RHEL in this example):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> mod_security</code></pre></div>\n<p>This will most likely create some config files for you within your apache root\ndirectory (e.g. <code class=\"language-text\">/etc/httpd</code>). These settings will enable ModSecurity as well\nas setup logging and some sensible defaults. These are in <code class=\"language-text\">mod_security.conf</code>.\nYou may want to check the default settings for uploads in case they will\naffect your users.</p>\n<h3>Configure for /wp-login.php</h3>\n<p>Borrowing (heavily) from the config provided <a href=\"http://www.frameloss.org/2011/07/29/stopping-brute-force-logins-against-wordpress/\">here</a>, create a config\nfor wordpress and place in the ModSecurity config directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># /etc/httpd/modsecurity.d/wordpress.conf</span>\n\n<span class=\"token comment\"># This has to be global, cannot exist within a directory or location clause . . .</span>\nSecAction phase:1,log,pass,initcol:ip<span class=\"token operator\">=</span>%<span class=\"token punctuation\">{</span>REMOTE_ADDR<span class=\"token punctuation\">}</span>,initcol:user<span class=\"token operator\">=</span>%<span class=\"token punctuation\">{</span>REMOTE_ADDR<span class=\"token punctuation\">}</span>,id:1\n\n<span class=\"token operator\">&lt;</span>Location /wp-login.php<span class=\"token operator\">></span>\n    <span class=\"token comment\"># Setup brute force detection.</span>\n\n    <span class=\"token comment\"># React if block flag has been set.</span>\n    SecRule user:bf_block <span class=\"token string\">\"@gt 0\"</span> <span class=\"token string\">\"deny,status:401,log,msg:'ip address blocked for 5 minutes, more than 15 login attempts in 3 minutes.',id:2\"</span>\n\n    <span class=\"token comment\"># Setup Tracking.  On a successful login, a 302 redirect is performed, a 200 indicates login failed.</span>\n    SecRule RESPONSE_STATUS <span class=\"token string\">\"^302\"</span> <span class=\"token string\">\"phase:5,t:none,log,pass,setvar:ip.bf_counter=0,id:3\"</span>\n    SecRule RESPONSE_STATUS <span class=\"token string\">\"^200\"</span> <span class=\"token string\">\"phase:5,chain,t:none,log,pass,setvar:ip.bf_counter=+1,deprecatevar:ip.bf_counter=1/180,id:4\"</span>\n    SecRule ip:bf_counter <span class=\"token string\">\"@gt 15\"</span> <span class=\"token string\">\"t:none,setvar:user.bf_block=1,expirevar:user.bf_block=300,setvar:ip.bf_counter=0\"</span>\n<span class=\"token operator\">&lt;</span>/location<span class=\"token operator\">></span></code></pre></div>\n<p>It is almost identical to the example provided in the link save a few changes\npossibly due to version differences. For example, the id parameter has been\nadded to all of the rules except the last one.</p>\n<p>Once you’re ready, reload the apache config:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> /etc/init.d/httpd reload</code></pre></div>\n<h3>Explanation</h3>\n<p>The ModSecurity syntax can be a bit cryptic, so I’ll try to break it down as\nbest I can. The first assumption is that a 302 response on wp-login.php means\na successful login and a 200 means a failed one. Each time a request is made\n(that returns with a 200 status code) it increments a counter for the ip\naddress by one <code class=\"language-text\">setvar:ip.bf_counter=+1</code> and then checks to see if the counter\nis over 15 <code class=\"language-text\">SecRule ip:bf_counter \"@gt 15\"</code>. If it is, it says a variable to\nblock the user that expires in 300 seconds (5 minutes)\n<code class=\"language-text\">setvar:user.bf_block=1,expirevar:user.bf_block=300</code> and resets the counter on\nthe IP address <code class=\"language-text\">setvar:ip.bf_counter=0</code>. As long as the blocking variable is\nset the user will be denied access <code class=\"language-text\">SecRule user:bf_block \"@gt 0\"\n\"deny,status:401\"</code>.</p>\n<p>While all of this is happening the ip address counter is being decremented by\n1 every 180 seconds (3 minutes) <code class=\"language-text\">deprecatevar:ip.bf_counter=1/180</code>. This means\nthat as long as the user waits at least 3 minutes in between each request they\nwill never get denied access for 5 minutes.</p>\n<h3>Testing</h3>\n<p>The easiest way to test this is to just hit the login screen a bunch with\nincorrect credentials. You should see a screen telling you that you are denied\naccess pretty quickly.</p>\n<p>I hope this helps with how to deal with this common brute-force attack and\nalso how ModSecurity works.</p>","fields":{"slug":"/2014/08-30-prevent-brute-force-login-on-wordpress/"},"frontmatter":{"title":"Preventing brute-force attacks on Wordpress's wp-login.php","date":"August 30, 2014","description":"Even if you use a non-standard username and strong password it can still be a burden on your server getting hit with the occasional brute-force attack to Wordpress's login page. Here you can use ModSecurity to limit the number requests and save resources.\n"}}},"pageContext":{"slug":"/2014/08-30-prevent-brute-force-login-on-wordpress/","previous":{"fields":{"slug":"/2014/08-22-analyzing-historical-apache-logs-piwik/"},"frontmatter":{"title":"Analyzing historical apache log data using piwik"}},"next":{"fields":{"slug":"/2014/09-07-docker-tips-and-tricks/"},"frontmatter":{"title":"Docker Tips and Tricks"}}}},
    "staticQueryHashes": ["1091219763","63159454"]}