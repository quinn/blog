{"componentChunkName":"component---src-templates-blog-post-js","path":"/2014/09-07-docker-tips-and-tricks/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Quinn's Blog"}},"markdownRemark":{"id":"bec416c8-1989-540a-8b02-fe64861dd06f","excerpt":"Enter a container To do this you’ll need a tool called . The easiest way to get it is\nto use the docker based installer: https://github.com/jpetazzo/nsenter One…","html":"<h3>Enter a container</h3>\n<p>To do this you’ll need a tool called <code class=\"language-text\">nsenter</code>. The easiest way to get it is\nto use the docker based installer: <a href=\"https://github.com/jpetazzo/nsenter\">https://github.com/jpetazzo/nsenter</a> One you\nhave this you can enter a running instance or run a command on a running\ninstance:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> nsenter <span class=\"token punctuation\">\\</span>\n  --target <span class=\"token variable\"><span class=\"token variable\">`</span>docker inspect --format <span class=\"token string\">'{{.State.Pid}}'</span> postgres<span class=\"token variable\">`</span></span> <span class=\"token punctuation\">\\</span>\n  --mount --uts --ipc --net --pid /bin/bash</code></pre></div>\n<p>If you used the above installer you’ll also have a shortcut for this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker-enter postgres</code></pre></div>\n<h3>Inspect API traffic</h3>\n<p>you can use <code class=\"language-text\">socat</code> to monitor traffic to the docker socket to introspect on\nAPI usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> socat -t100 -v <span class=\"token punctuation\">\\</span>\n  UNIX-LISTEN:/tmp/proxysocket.sock,mode<span class=\"token operator\">=</span><span class=\"token number\">777</span>,reuseaddr,fork <span class=\"token punctuation\">\\</span>\n  UNIX-CONNECT:/var/run/docker.sock</code></pre></div>\n<p>Leave this open and open a new terminal. Specify the socket created by socat\nas the docker host:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">DOCKER_HOST</span><span class=\"token operator\">=</span>unix:///tmp/proxysocket.sock docker <span class=\"token function\">ps</span></code></pre></div>\n<p>As the command runs observe the output from the previous terminal. This can be\nvery helpful when developing against the docker API to see how the terminal\ncommands operate.</p>\n<h3>Batch commands</h3>\n<p>Sometimes it can be quicker to operate on multiple docker containers at once,\nespecially while testing a new container to get the parameters correct.</p>\n<p>Remove all containers of a given image:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">`</span>docker <span class=\"token function\">ps</span> -a <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> 0fa4de <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -f1 -d<span class=\"token string\">\" \"</span><span class=\"token variable\">`</span></span>\n<span class=\"token comment\"># also this format uses xargs instead of backticks</span>\ndocker <span class=\"token function\">ps</span> -a <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> 0fa4de <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d <span class=\"token string\">' '</span> -f <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> docker <span class=\"token function\">rm</span>\n<span class=\"token comment\"># or if you need to stop them before removing replace rm with kill:</span>\ndocker <span class=\"token function\">ps</span> -a <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> 0fa4de <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d <span class=\"token string\">' '</span> -f <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> docker <span class=\"token function\">kill</span>\ndocker <span class=\"token function\">ps</span> -a <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> 0fa4de <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d <span class=\"token string\">' '</span> -f <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> docker <span class=\"token function\">rm</span></code></pre></div>\n<p>Remove stopped containers:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token function\">ps</span> -a <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> Exit <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d <span class=\"token string\">' '</span> -f <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> docker <span class=\"token function\">rm</span></code></pre></div>\n<p>You can use similar techniques for deleting images (though removing multiple\nimages is less common):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token function\">ps</span> -a <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> string-of-text <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d <span class=\"token string\">' '</span> -f <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> docker rmi</code></pre></div>\n<p>Hopefully this helps! Let me know if you have any other common techniques\nwhile using docker.</p>","fields":{"slug":"/2014/09-07-docker-tips-and-tricks/"},"frontmatter":{"title":"Docker Tips and Tricks","date":"September 07, 2014","description":"Here are a few little things I use on a daily basis while working with docker.\n"}}},"pageContext":{"slug":"/2014/09-07-docker-tips-and-tricks/","previous":{"fields":{"slug":"/2014/08-30-prevent-brute-force-login-on-wordpress/"},"frontmatter":{"title":"Preventing brute-force attacks on Wordpress's wp-login.php"}},"next":{"fields":{"slug":"/2014/09-15-change-rails-server-default-port/"},"frontmatter":{"title":"Change the default port that rails uses"}}}}}