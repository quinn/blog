{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2021/11-20-compiler-lexer/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Quinn's Blog"}},"markdownRemark":{"id":"423a9f54-258f-5f0e-a6e3-763eda8caa36","excerpt":"As a programmer I enjoy building things. I also like knowing how things work, I figure the two are related. There are a few things that I feel I’ve missed out…","html":"<p>As a programmer I enjoy building things. I also like knowing how things work, I figure the two are related. There are a few things that I feel I’ve missed out on from not attending a CS program (nothing practical of course), one being a deeper understanding of how programming languages are written. To this end I’ve decided to spend some time learning how to write compilers.</p>\n<p>I decided that writing a C compiler would be a good place to start. I don’t know C. In spite of this, I think it will be a good choice because of it’s simplicity. Not simplicity in terms of writing correct programs with it, but simplicity in terms of being “lower level” so probably less work to turn it into assembly.</p>\n<p>I did a Google search for something like “write C compiler tutorial” and <a href=\"https://norasandler.com/2017/11/29/Write-a-Compiler.html\">found this post series</a> which looks promising. I’ll probably try to do posts that match, 10 parts.</p>\n<p>Nora said examples will be given in x86 instruction sets, but I’ll be attempting to rewrite using AMD64. Based on AMD64 docs this should be fine because it should support all x86 instructions.</p>\n<p>Also, Nora started writing in python and eventually switched to OCamel, despite not knowing the language at all. I’m going to start in Ruby and see how it goes!</p>\n<p>The first step is to write a lexer. It seems all a lexer does is turn a code file into a list of tokens. Parenthes, keywords, identifiers, etc. It does not add any structure or attempt to check the code as valid. Later steps use the list of tokens to create the structure of the program.</p>\n<p>The program to be, uh, lexed is this:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here’s the lexer I wrote:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">Token</span>\n    <span class=\"token constant\">BLOCK</span> <span class=\"token operator\">=</span> <span class=\"token symbol\">:BLOCK</span>\n    <span class=\"token constant\">END_BLOCK</span> <span class=\"token operator\">=</span> <span class=\"token symbol\">:END_BLOCK</span>\n    <span class=\"token constant\">PAREN</span> <span class=\"token operator\">=</span> <span class=\"token symbol\">:PAREN</span>\n    <span class=\"token constant\">END_PAREN</span> <span class=\"token operator\">=</span> <span class=\"token symbol\">:END_PAREN</span>\n    <span class=\"token constant\">KEYWORD</span> <span class=\"token operator\">=</span> <span class=\"token symbol\">:KEYWORD</span>\n    <span class=\"token constant\">CONST</span> <span class=\"token operator\">=</span> <span class=\"token symbol\">:CONST</span>\n    <span class=\"token constant\">TERM</span> <span class=\"token operator\">=</span> <span class=\"token symbol\">:TERM</span>\n    <span class=\"token constant\">ID</span> <span class=\"token operator\">=</span> <span class=\"token symbol\">:ID</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">keywords</span></span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"int\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"return\"</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\ntokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ncurconst <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\n<span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">(</span><span class=\"token constant\">ARGV</span><span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>each_char <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>char<span class=\"token operator\">|</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">/</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span><span class=\"token constant\">Z0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span> <span class=\"token operator\">=</span><span class=\"token operator\">~</span> char\n        curconst <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> char\n        <span class=\"token keyword\">next</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">if</span> curconst<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> <span class=\"token constant\">Token</span><span class=\"token punctuation\">.</span>keywords<span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token operator\">?</span> curconst\n            tokens <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Token</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">KEYWORD</span><span class=\"token punctuation\">,</span> curconst<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">elsif</span> curconst <span class=\"token operator\">=</span><span class=\"token operator\">~</span> <span class=\"token regex\">/^[0-9]+$/</span>\n            tokens <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Token</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">CONST</span><span class=\"token punctuation\">,</span> curconst<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span>\n            tokens <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Token</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ID</span><span class=\"token punctuation\">,</span> curconst<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">end</span>\n\n        curconst <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">end</span>\n\n    token <span class=\"token operator\">=</span> <span class=\"token keyword\">case</span> char\n    <span class=\"token keyword\">when</span> <span class=\"token string\">'{'</span> <span class=\"token keyword\">then</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Token</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">BLOCK</span><span class=\"token punctuation\">,</span> char<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">when</span> <span class=\"token string\">'}'</span> <span class=\"token keyword\">then</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Token</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">END_BLOCK</span><span class=\"token punctuation\">,</span> char<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">when</span> <span class=\"token string\">'('</span> <span class=\"token keyword\">then</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Token</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">PAREN</span><span class=\"token punctuation\">,</span> char<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">when</span> <span class=\"token string\">')'</span> <span class=\"token keyword\">then</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Token</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">END_PAREN</span><span class=\"token punctuation\">,</span> char<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">when</span> <span class=\"token string\">';'</span> <span class=\"token keyword\">then</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Token</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">TERM</span><span class=\"token punctuation\">,</span> char<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">when</span> <span class=\"token operator\">/</span>\\s<span class=\"token operator\">/</span> <span class=\"token keyword\">then</span> <span class=\"token keyword\">next</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">raise</span> <span class=\"token string\">\"unknown token %s\"</span> <span class=\"token operator\">%</span> char<span class=\"token punctuation\">.</span>inspect\n    <span class=\"token keyword\">end</span>\n\n    tokens <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> token\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>neat-o, it lexes! cool. The next step is to create the AST. I’ll be covering that in my next post, unless I completely lose interest and never work on this again!</p>","fields":{"slug":"/2021/11-20-compiler-lexer/"},"frontmatter":{"title":"Writing a C Compiler: Part 1, Lexer","date":"November 10, 2021","description":null}}},"pageContext":{"slug":"/2021/11-20-compiler-lexer/","previous":{"fields":{"slug":"/2020/02-07-redirect-with-ssl-aws/"},"frontmatter":{"title":"Setup serverless redirects on AWS with SSL and Route 53"}},"next":null}},
    "staticQueryHashes": ["1091219763","63159454"]}